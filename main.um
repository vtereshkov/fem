import (
    "th.um"
    "window.um"
    "ui.um"
    "input.um"
    "font.um"
    "rect.um"

    "editor.um"
)

fn init*() {
    window.setup("I LOVE FEM", 1300, 600)

    style := ui.getDefaultStyle()
    style.ft = font.load("sans.ttf", 16, font.filterLinear)
    toolbarGui := new(ui.Gui, ui.mk(rect.mk(0, 0, 100, 10000), style))

    forceTextBox := new([2]ui.TextBox)
    forceTextBox[0].setBuf("0")
    forceTextBox[1].setBuf("-100")
    
    ed := new(editor.Editor)
    ed.init()

    const captions = [9]str{
        "Boundary",
        "Hole",
        "Points",
        "Forces",
        "Constraints",
        "Edit",
        "Delete",
        "Calculate",
        "Clear"
    }

    window.onFrame.register(|ed, toolbarGui, forceTextBox| {
        window.setViewport(window.getDims())

        layout := ui.LayoutFn |ed, forceTextBox| {
            gui.box({dimension: 30, growType: ui.BoxGrowDimension, dir: ui.BoxDirectionDown})
            {   
                for cmd, caption in captions {
                    isButtonPressed := !gui.isEval && ed.cmd == cmd

                    if isButtonPressed {
                        pressedStyle := gui.getStyle()^
                        pressedStyle.posBox = gui.getStyle().negBox
                        pressedStyle.negBox = gui.getStyle().posBox
                        gui.pushStyle(pressedStyle)
                    }

                    if gui.qbutton(caption) && ed.cmd != cmd {
                        ed.startCmd(cmd)
                    }

                    if isButtonPressed {
                        gui.popStyle()
                    }                    
                }

                if ed.cmd == editor.CMD_ENTER_FORCES {
                    gui.label("Force X, Y (N)", {centerX: true, centerY: true})
                    gui.textBox(&forceTextBox[0])
                    gui.textBox(&forceTextBox[1])
                }                

                gui.label(ed.statusMsg, {centerX: true, centerY: true})
            }
            gui.popContainer()
        }

        toolbarGui.eval(layout)

        force := new(th.Vf2)
        numXVals := sscanf(forceTextBox[0].getBuf(), "%f", &force.x)
        numYVals := sscanf(forceTextBox[1].getBuf(), "%f", &force.y)
        if numXVals != 1 || numYVals != 1 {
            force = null
        }

        if input.isJustPressed(input.mouse1) {
            ed.processLeftClick(input.getMousePos(), force)
        } else if input.isJustPressed(input.mouse3) {
            ed.processRightClick()
        } else if input.isPressed(input.mouse1) {
            ed.processLeftDrag(input.getMousePos())
        } else if input.isPressed(input.mouse2) {
            ed.processMidDrag(input.getMouseDelta())
        } else if input.getMouseScroll().y != 0.0 {
            ed.processWheel(input.getMousePos(), input.getMouseScroll().y)
        }

        ed.draw(window.getDims())
        toolbarGui.draw(layout)
    })
}