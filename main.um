import (
    "th.um"
    "window.um"
    "ui.um"
    "input.um"
    "font.um"
    "rect.um"

    "fem.um"
    "editor.um"
)

const cmdNames = [10]str{
    "Boundary",
    "Hole",
    "Points",
    "Forces",
    "Constraints",
    "Material",
    "Edit",
    "Delete",
    "Calculate",
    "Clear"
}

const errStrings = [5]str{
    "",
    "Bad boundary",
    "Bad force",
    "Bad constraints",
    "Bad material"
}

var (
    toolbarGui: ui.Gui
    forceTextBox: [2]ui.TextBox
    youngTextBox, poissonTextBox, thicknessTextBox: ui.TextBox
    ed: editor.Editor
    ft: font.Font
)

fn latchButton(gui: ^ui.Gui, caption: str, isDown: bool, onClick: fn()) {
    if !gui.isEval && isDown {
        style := gui.getStyle()^
        style.posBox = gui.getStyle().negBox
        style.negBox = gui.getStyle().posBox
        gui.pushStyle(style)
    }

    if gui.qbutton(caption) {
        onClick()
    }

    if !gui.isEval && isDown {
        gui.popStyle()
    }     
}

fn init*() {
    window.setup("I LOVE FEM", 1300, 600)

    ft = font.load("sans.ttf", 16, font.filterLinear)

    style := ui.getDefaultStyle()
    style.ft = ft
    toolbarGui = ui.mk(rect.mk(0, 0, 100, 10000), style)

    forceTextBox[0].setBuf("100")
    forceTextBox[1].setBuf("100")

    youngTextBox.setBuf("200")
    poissonTextBox.setBuf("0.3")
    thicknessTextBox.setBuf("1")
    
    ed.init()

    window.onFrame.register({
        window.setViewport(window.getDims())

        // Construct toolbar GUI
        layout := ui.LayoutFn {
            gui.box({dimension: 30, growType: ui.BoxGrowDimension, dir: ui.BoxDirectionDown})
            {   
                // General command buttons
                for cmd, cmdName in cmdNames {
                    latchButton(gui, cmdName, ed.cmd == cmd, fn () |cmd| {
                        if ed.cmd != cmd {
                            ed.startCmd(cmd)
                        }
                    })
                }

                // Command-specific text boxes and buttons
                switch ed.cmd {
                    case editor.CMD_ENTER_FORCES:
                        gui.label("Force X, Y (N)", {centerX: true, centerY: true})
                        gui.textBox(&forceTextBox[0])
                        gui.textBox(&forceTextBox[1])

                    case editor.CMD_ENTER_MATERIAL:
                        gui.label("Young (GPa)", {centerX: true, centerY: true})
                        gui.textBox(&youngTextBox)
                        gui.label("Poisson", {centerX: true, centerY: true})
                        gui.textBox(&poissonTextBox)
                        gui.label("Thickness (mm)", {centerX: true, centerY: true})                    
                        gui.textBox(&thicknessTextBox)

                    case editor.CMD_CALCULATE:
                        gui.label("")
                        latchButton(gui, "Show deformed", ed.showDeformed, fn () {
                            ed.showDeformed = !ed.showDeformed
                        })
                }           

                // Error message
                gui.label(errStrings[ed.errCode], {centerX: true, centerY: true})
            }
            gui.popContainer()
        }

        toolbarGui.eval(layout)

        // Process force text boxes data
        if ed.cmd == editor.CMD_ENTER_FORCES {
            force := new(th.Vf2)

            ok := sscanf(forceTextBox[0].getBuf(), "%f", &force.x) == 1 &&
                  sscanf(forceTextBox[1].getBuf(), "%f", &force.y) == 1

            ed.curForce = ok ? force : null
        }

        // Process material text boxes data
        if ed.cmd == editor.CMD_ENTER_MATERIAL {
            material := new(fem.Material)

            ok := sscanf(youngTextBox.getBuf(),     "%lf", &material.young)     == 1 &&
                  sscanf(poissonTextBox.getBuf(),   "%lf", &material.poisson)   == 1 &&
                  sscanf(thicknessTextBox.getBuf(), "%lf", &material.thickness) == 1

            if ok {
                material.young /= 1e9       // GPa -> Pa
                material.thickness /= 1e3   // mm  -> m
                ed.curMaterial = material 
            } else {
                ed.curMaterial = null
            }
        }

        // Process mouse input
        if input.isJustPressed(input.mouse1) {
            ed.processLeftClick(input.getMousePos())
        } else if input.isJustPressed(input.mouse3) {
            ed.processRightClick()
        } else if input.isPressed(input.mouse1) {
            ed.processLeftDrag(input.getMousePos())
        } else if input.isPressed(input.mouse2) {
            ed.processMidDrag(input.getMouseDelta())
        } else if input.getMouseScroll().y != 0.0 {
            ed.processWheel(input.getMousePos(), input.getMouseScroll().y)
        }

        // Draw GUI
        ed.draw(window.getDims(), ft)
        toolbarGui.draw(layout)
    })
}