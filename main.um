import (
    "th.um"
    "window.um"
    "ui.um"
    "input.um"
    "font.um"
    "rect.um"

    "fem.um"
    "editor.um"
)

const cmdNames = [10]str{
    "Boundary",
    "Hole",
    "Points",
    "Forces",
    "Constraints",
    "Material",
    "Edit",
    "Delete",
    "Calculate",
    "Clear"
}

const errStrings = [5]str{
    "",
    "Bad boundary",
    "Bad force",
    "Bad constraints",
    "Bad material"
}

var (
    toolbarGui: ui.Gui

    gridTextBox: ui.TextBox
    forceTextBox: [2]ui.TextBox
    youngTextBox, poissonTextBox, yieldTextBox, thicknessTextBox: ui.TextBox
    exaggerationTextBox: ui.TextBox

    ed: editor.Editor

    ft: font.Font
)

fn latchButton(gui: ^ui.Gui, caption: str, isDown: bool, onClick: fn()) {
    if !gui.isEval && isDown {
        style := gui.getStyle()^
        style.posBox = gui.getStyle().negBox
        style.negBox = gui.getStyle().posBox
        gui.pushStyle(style)
    }

    if gui.qbutton(caption) {
        onClick()
    }

    if !gui.isEval && isDown {
        gui.popStyle()
    }     
}

fn init*() {
    window.setup("I LOVE FEM", 1300, 600)

    ft = font.load("sans.ttf", 16, font.Filter.linear)

    style := ui.getDefaultStyle()
    style.ft = ft
    toolbarGui = ui.mk(rect.mk(0, 0, 100, 10000), style)

    ed.init()

    gridTextBox.setBuf(sprintf("%g", ed.gridSize / 1e-3))                           // m  -> mm

    forceTextBox[0].setBuf("1000")
    forceTextBox[1].setBuf("1000")

    youngTextBox.setBuf(sprintf("%g", ed.curMaterial.young / 1e9))                  // Pa -> GPa
    poissonTextBox.setBuf(sprintf("%g", ed.curMaterial.poisson))
    yieldTextBox.setBuf(sprintf("%g", ed.curMaterial.yield / 1e9))                  // Pa -> GPa
    thicknessTextBox.setBuf(sprintf("%g", ed.curMaterial.thickness / 1e-3))         // m  -> mm

    exaggerationTextBox.setBuf(sprintf("%g", ed.displacementExaggeration))
    
    window.onFrame.register({
        window.setViewport(window.getDims())

        // Construct toolbar GUI
        layout := ui.LayoutFn {
            gui.box({dimension: 25, growType: ui.BoxGrow.dimension, dir: ui.BoxDir.down})
            {                   
                for cmdIndex, cmdName in cmdNames {
                    cmd := editor.Cmd(cmdIndex)

                    // Command button
                    latchButton(gui, cmdName, ed.cmd == cmd, fn () |cmd| {
                        if ed.cmd != cmd {
                            ed.startCmd(cmd)
                        }                        
                    })

                    // Command-specific text boxes and buttons
                    if ed.cmd == cmd {
                        switch ed.cmd {
                            case editor.Cmd.ENTER_FORCES:
                                gui.label("Force X, Y (N)", {centerX: true, centerY: true})
                                gui.textBox(&forceTextBox[0])
                                gui.textBox(&forceTextBox[1])

                            case editor.Cmd.ENTER_MATERIAL:
                                gui.label("Young (GPa)", {centerX: true, centerY: true})
                                gui.textBox(&youngTextBox)
                                gui.label("Poisson", {centerX: true, centerY: true})
                                gui.textBox(&poissonTextBox)
                                gui.label("Yield (GPa)", {centerX: true, centerY: true})
                                gui.textBox(&yieldTextBox)                        
                                gui.label("Thickness (mm)", {centerX: true, centerY: true})                    
                                gui.textBox(&thicknessTextBox)

                            case editor.Cmd.CALCULATE:
                                latchButton(gui, "Deformed", ed.showDeformed, fn () {
                                    ed.showDeformed = !ed.showDeformed
                                })
                                if ed.showDeformed {
                                    gui.label("Exaggeration", {centerX: true, centerY: true})
                                    gui.textBox(&exaggerationTextBox)
                                }
                        }
                    }
                }

                // Grid mode button and text box
                latchButton(gui, "Grid", ed.useGrid, fn () {
                    ed.useGrid = !ed.useGrid
                })

                if ed.useGrid {
                    gui.label("Size (mm)", {centerX: true, centerY: true})                    
                    gui.textBox(&gridTextBox)                    
                }

                // Error message
                gui.label(errStrings[int(ed.errCode)], {centerX: true, centerY: true})
            }
            gui.popContainer()
        }

        toolbarGui.eval(layout)

        // Process text box input
        if ed.useGrid {
            gridSize := 0.0
            ok := sscanf(gridTextBox.getBuf(), "%lf", &gridSize) == 1
            if ok {
                gridSize *= 1e-3            // mm -> m
                ed.gridSize = gridSize
            }            
        }

        switch ed.cmd {
            case editor.Cmd.ENTER_FORCES:
                force := new(th.Vf2)

                ok := sscanf(forceTextBox[0].getBuf(), "%f", &force.x) == 1 &&
                      sscanf(forceTextBox[1].getBuf(), "%f", &force.y) == 1

                ed.curForce = ok ? force : null

            case editor.Cmd.ENTER_MATERIAL:
                material := new(fem.Material)

                ok := sscanf(youngTextBox.getBuf(),     "%lf", &material.young)     == 1 &&
                      sscanf(poissonTextBox.getBuf(),   "%lf", &material.poisson)   == 1 &&
                      sscanf(yieldTextBox.getBuf(),     "%lf", &material.yield)     == 1 &&
                      sscanf(thicknessTextBox.getBuf(), "%lf", &material.thickness) == 1

                if ok {
                    material.young *= 1e9       // GPa -> Pa
                    material.yield *= 1e9       // GPa -> Pa
                    material.thickness *= 1e-3  // mm  -> m
                    ed.curMaterial = material 
                } else {
                    ed.curMaterial = null
                }

            case editor.Cmd.CALCULATE:
                if ed.showDeformed {
                    exaggeration := 0.0
                    ok := sscanf(exaggerationTextBox.getBuf(), "%lf", &exaggeration) == 1
                    if ok {
                        ed.displacementExaggeration = exaggeration
                    }
                }
        }

        // Process mouse input
        if input.isJustPressed(input.Key.mouse1) {
            ed.processLeftClick(input.getMousePos())
        } else if input.isJustPressed(input.Key.mouse3) {
            ed.processRightClick()
        } else if input.isPressed(input.Key.mouse1) {
            ed.processLeftDrag(input.getMousePos())
        } else if input.isPressed(input.Key.mouse2) {
            ed.processMidDrag(input.getMouseDelta())
        } else if input.getMouseScroll().y != 0.0 {
            ed.processWheel(input.getMousePos(), input.getMouseScroll().y)
        }

        // Draw GUI
        ed.draw(window.getDims(), input.getMousePos(), ft)
        toolbarGui.draw(layout)
    })
}