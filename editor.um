import (
    "std.um"

    "th.um"
    "canvas.um"
    "font.um"

    "delaunay.um"
    "fem.um"
)

type (
    Poly = struct {
        vert: []int
        isHole: bool
    }

    Triangle = [3]int

    PointSet = map[int]bool

    ForceSet = map[int]th.Vf2

    Editor* = struct {
        cmd: int

        pts: []th.Vf2
        polys: []Poly
        tris: []Triangle

        constraints: PointSet
        forces: ForceSet

        displacements: []th.Vf2
        stresses: []real

        selectedPt: int
        curPoly: Poly
        curForce: ^th.Vf2
        curMaterial: ^fem.Material

        cam: th.Transform
        showDeformed: bool
        errCode: int
    }
)

const (
    CMD_ENTER_BOUNDARY* = 0
    CMD_ENTER_HOLE*
    CMD_ENTER_POINTS*
    CMD_ENTER_FORCES*
    CMD_ENTER_CONSTRAINTS*
    CMD_ENTER_MATERIAL*
    CMD_EDIT_POINT*
    CMD_DELETE_POINT*
    CMD_CALCULATE*
    CMD_CLEAR*  
)

const (
    ERR_NONE* = 0
    ERR_BAD_BOUNDARY*
    ERR_BAD_FORCE*
    ERR_BAD_CONSTRAINTS*
    ERR_BAD_MATERIAL*
)

const (
    POINT_SIZE                  = 10
    LINE_WIDTH                  = 3
    FORCE_LENGTH                = 40
    DEFAULT_SCALE               = 4000    // pix/m
    DISPLACEMENT_EXAGGERATION   = 10
)

fn sign(x: real): real {
    if x > 0 {return 1}
    if x < 0 {return -1}
    return 0
}

fn clamp(x, max: real): real {
    if x > max {return max}
    return x
}

fn noise(): real {
    return 1e-5 * (std.frand() - 0.5)
}

fn inverse(t: th.Transform): th.Transform {
    return {p: {-t.p.x / t.s.x, -t.p.y / t.s.y}, s: {1.0 / t.s.x, 1.0 / t.s.y}}
}

fn (poly: ^Poly) reverse() {
    for i, j := 0, len(poly.vert) - 1; i < j; i++ {
        poly.vert[i], poly.vert[j] = poly.vert[j], poly.vert[i]
        j--
    }
}

fn (pts: ^PointSet) condense(): PointSet {
    res := PointSet{}
    for pt, exists in pts {
        if exists {
            res[pt] = true
        }
    }
    return res
}

fn (constraints: ^PointSet) isValid(): bool {
    constraints^ = constraints.condense()
    return len(constraints^) >= 2
} 

fn (ed: ^Editor) isClockwise(poly: Poly): bool {
    sum := 0.0
    for i, pt1 := 0, ed.pts[poly.vert[len(poly.vert) - 1]]; i < len(poly.vert); i++ {
        pt2 := ed.pts[poly.vert[i]]
        sum += (pt2.x - pt1.x) * (pt2.y + pt1.y)
        pt1 = pt2
    }
    return sum > 0.0
}

fn (ed: ^Editor) isInPoly(ptIndex: int): bool {
    for _, poly in ed.polys {
        for _, pt in poly.vert {
            if pt == ptIndex {
                return true
            }
        }
    }

    for _, pt in ed.curPoly.vert {
        if pt == ptIndex {
            return true
        }
    }    
    return false
}

fn (ed: ^Editor) findPoint(pos: th.Vf2): int {
    for i, pt in ed.pts {
        if fabs((pos.x - pt.x) * ed.cam.s.x) < POINT_SIZE && fabs((pos.y - pt.y) * ed.cam.s.y) < POINT_SIZE {
            return i
        }
    }
    return -1
}

fn (ed: ^Editor) deleteSelectedPoint() {
    // Detect polygon containing the point, decrement other point indices
    polyToDelete := -1
    for polyIndex, poly in ed.polys {
        for vertIndex, vert in poly.vert {
            if vert == ed.selectedPt {
                polyToDelete = polyIndex
                break
            } else if vert > ed.selectedPt {
                poly.vert[vertIndex]--
            }
        }
    }

    // Delete polygon containing the point
    if polyToDelete >= 0 {
        ed.polys = delete(ed.polys, polyToDelete)
    }

    // Delete force associated with the point, decrement other point indices
    ed.forces[ed.selectedPt] = th.Vf2{0, 0}
    for ptIndex, force in ed.forces {
        if force.mag() != 0 && ptIndex > ed.selectedPt {
            ed.forces[ptIndex] = th.Vf2{0, 0}
            ed.forces[ptIndex - 1] = force
        }
    }    

    // Delete constraint associated with the point, decrement other point indices
    ed.constraints[ed.selectedPt] = false
    for ptIndex, exists in ed.constraints {
        if exists && ptIndex > ed.selectedPt {
            ed.constraints[ptIndex] = false
            ed.constraints[ptIndex - 1] = true
        }
    }

    // Delete point
    ed.pts = delete(ed.pts, ed.selectedPt)
    ed.selectedPt = -1
}

fn (ed: ^Editor) getDisplacedPt(ptIndex: int): th.Vf2 {
    pt := ed.pts[ptIndex]
    if ed.showDeformed {
        pt = pt.add(ed.displacements[ptIndex].mulf(DISPLACEMENT_EXAGGERATION))
    }
    return pt  
}

fn (ed: ^Editor) triangulate(): bool {
    boundaries := delaunay.EdgeSet{}
    numMainBoundaries := 0

    for _, poly in ed.polys {
        if !poly.isHole {
            numMainBoundaries++
        }

        for i, pt1 := 0, poly.vert[len(poly.vert) - 1]; i < len(poly.vert); i++ {
            pt2 := poly.vert[i]
            boundaries[{pt1, pt2}] = true
            pt1 = pt2
        } 
    }   

    ed.tris = []Triangle{}

    if numMainBoundaries != 1 {
        return false
    }

    triangles := delaunay.triangulate(ed.pts, boundaries) 
    if len(triangles) == 0 {
        return false
    }

    for tri in triangles {
        ed.tris = append(ed.tris, Triangle(tri))          
    }

    return true
}

fn (ed: ^Editor) calculate() {
    if ed.curMaterial == null || !ed.curMaterial.isValid() {
        ed.errCode = ERR_BAD_MATERIAL
        return
    }

    if !ed.constraints.isValid() {
        ed.errCode = ERR_BAD_CONSTRAINTS
        return
    }

    if !ed.triangulate() {
        ed.errCode = ERR_BAD_BOUNDARY
        return
    }

    ed.displacements, ed.stresses = fem.solve(ed.pts, ed.tris, ed.forces, ed.constraints, ed.curMaterial^)
}

fn (ed: ^Editor) init*() {
    ed.curMaterial = &fem.Material{young: 200e9, poisson: 0.3, yield: 1e9, thickness: 0.001}
    ed.cam = th.mkTransform({0, 0}, {DEFAULT_SCALE, -DEFAULT_SCALE})
    ed.cmd = CMD_EDIT_POINT
}

fn (ed: ^Editor) endCmd*() {
    switch ed.cmd {
        case CMD_DELETE_POINT:
            if ed.selectedPt >= 0 {
                if ed.forces[ed.selectedPt].mag() != 0.0 {
                    ed.forces[ed.selectedPt] = th.Vf2{0, 0}
                } else if ed.constraints[ed.selectedPt] {
                    ed.constraints[ed.selectedPt] = false
                } else {
                    ed.deleteSelectedPoint()
                }
            }

        case CMD_ENTER_BOUNDARY, CMD_ENTER_HOLE:
            if len(ed.curPoly.vert) > 2 {
                if ed.curPoly.isHole != ed.isClockwise(ed.curPoly) {
                    ed.curPoly.reverse()
                }
                ed.polys = append(ed.polys, ed.curPoly)
            }
    }

    ed.selectedPt = -1
    ed.curPoly = {isHole: ed.cmd == CMD_ENTER_HOLE}
    ed.errCode = ERR_NONE
}

fn (ed: ^Editor) startCmd*(cmd: int) {
    ed.endCmd()
    ed.cmd = cmd
    
    switch ed.cmd {
        case CMD_ENTER_BOUNDARY, CMD_ENTER_HOLE:
            ed.curPoly = {isHole: ed.cmd == CMD_ENTER_HOLE}

        case CMD_CALCULATE:
            ed.calculate()

        case CMD_CLEAR:
            ed^ = Editor{}
            ed.init() 
    } 
}

fn (ed: ^Editor) processLeftClick*(pos: th.Vf2) {
    worldPos := pos.transformed(inverse(ed.cam)).add({noise(), noise()})

    switch ed.cmd {
        case CMD_EDIT_POINT, CMD_DELETE_POINT: 
            ed.selectedPt = ed.findPoint(worldPos)

        case CMD_ENTER_POINTS:
            ed.pts = append(ed.pts, worldPos)

        case CMD_ENTER_CONSTRAINTS:
            if existingPt := ed.findPoint(worldPos); existingPt >= 0 {
                ed.constraints[existingPt] = true
            } else {            
                ed.pts = append(ed.pts, worldPos)
                ed.constraints[len(ed.pts) - 1] = true
            }

        case CMD_ENTER_FORCES:
            if ed.curForce != null {
                if existingPt := ed.findPoint(worldPos); existingPt >= 0 {
                    ed.forces[existingPt] = ed.curForce^
                } else {            
                    ed.pts = append(ed.pts, worldPos)
                    ed.forces[len(ed.pts) - 1] = ed.curForce^
                }                
            } else {
                ed.errCode = ERR_BAD_FORCE
            }               

        case CMD_ENTER_BOUNDARY, CMD_ENTER_HOLE:
            if existingPt := ed.findPoint(worldPos); existingPt >= 0 {
                if !ed.isInPoly(existingPt) {
                    ed.curPoly.vert = append(ed.curPoly.vert, existingPt)
                }
            } else {            
                ed.pts = append(ed.pts, worldPos)
                ed.curPoly.vert = append(ed.curPoly.vert, len(ed.pts) - 1)
            }
    }
}

fn (ed: ^Editor) processRightClick*() {
    ed.endCmd()
}

fn (ed: ^Editor) processLeftDrag*(pos: th.Vf2) {
    if ed.cmd == CMD_EDIT_POINT && ed.selectedPt >= 0 {
        worldPos := pos.transformed(inverse(ed.cam)).add({noise(), noise()})        
        ed.pts[ed.selectedPt] = worldPos     
    }
}

fn (ed: ^Editor) processMidDrag*(delta: th.Vf2) {
    ed.cam.p = ed.cam.p.add(delta)
}

fn (ed: ^Editor) processWheel*(pos: th.Vf2, scroll: real32) {
    scale := (1 + 0.1 * scroll) * ed.cam.s.x
    
    if scale >  10 * DEFAULT_SCALE {scale =  10 * DEFAULT_SCALE}
    if scale < 0.1 * DEFAULT_SCALE {scale = 0.1 * DEFAULT_SCALE}

    ed.cam.p = ed.cam.p.sub(pos.transformed(inverse(ed.cam)).mul({scale - ed.cam.s.x, -scale - ed.cam.s.y}))
    ed.cam.s = {scale, -scale}
}

fn (ed: ^Editor) drawBackground(windowSize: th.Vf2) {
    canvas.drawRect(0x222222FF, {-10, -10, windowSize.x + 20, windowSize.y + 20})
}

fn (ed: ^Editor) drawPolygons() {
    for _, poly in ed.polys {
        clr := poly.isHole ? th.blue : th.white

        for i, pt1 := 0, ed.pts[poly.vert[len(poly.vert) - 1]]; i < len(poly.vert); i++ {
            pt2 := ed.pts[poly.vert[i]]
            canvas.drawLine(clr, pt1.transformed(ed.cam), pt2.transformed(ed.cam), LINE_WIDTH)
            pt1 = pt2
        }
    }

    // Draw current polygon
    if len(ed.curPoly.vert) > 0 {
        for i, pt1 := 0, ed.pts[ed.curPoly.vert[0]]; i < len(ed.curPoly.vert) - 1; i++ {
            pt2 := ed.pts[ed.curPoly.vert[i + 1]]
            canvas.drawLine(th.red, pt1.transformed(ed.cam), pt2.transformed(ed.cam), LINE_WIDTH)
            pt1 = pt2
        }
    }   
}

fn (ed: ^Editor) drawPoints() {
    for i, pt in ed.pts {
        clr := i == ed.selectedPt ? th.red : th.green
        screenPt := pt.transformed(ed.cam)
        canvas.drawQuad(clr, {
            screenPt.add({-POINT_SIZE / 2, -POINT_SIZE / 2}), 
            screenPt.add({ POINT_SIZE / 2, -POINT_SIZE / 2}), 
            screenPt.add({ POINT_SIZE / 2,  POINT_SIZE / 2}), 
            screenPt.add({-POINT_SIZE / 2,  POINT_SIZE / 2})
        })
    }
}

fn (ed: ^Editor) drawTriangles() {
    for triIndex, tri in ed.tris {
        var screenPt: [3]th.Vf2
        for i, ptIndex in tri {
            screenPt[i] = ed.getDisplacedPt(ptIndex).transformed(ed.cam)
        }
        
        red   := round(0x99 * clamp(ed.stresses[triIndex] / ed.curMaterial.yield, 1.0))
        green := 0x99 - red
        blue  := 0
        color := (red << 24) | (green << 16) | (blue << 8) | 0xFF

        canvas.drawQuad(color, {screenPt[0], screenPt[1], screenPt[2], screenPt[2]})
        canvas.drawLine(0xAAAAAAFF, screenPt[0], screenPt[1], 1)
        canvas.drawLine(0xAAAAAAFF, screenPt[1], screenPt[2], 1)
        canvas.drawLine(0xAAAAAAFF, screenPt[2], screenPt[0], 1)
    }
}

fn (ed: ^Editor) drawForces(ft: font.Font) {
    for ptIndex, force in ed.forces {
        if force.mag() == 0.0 {continue}

        screenPt0 := ed.getDisplacedPt(ptIndex).transformed(ed.cam)

        if force.x != 0 {
            sgn := sign(force.x * ed.cam.s.x)

            screenPt := screenPt0.add({-sgn * FORCE_LENGTH, 0})
            canvas.drawLine(th.yellow, screenPt0, screenPt, 2)
            canvas.drawLine(th.yellow, screenPt0, screenPt0.add({-sgn * FORCE_LENGTH / 2,  5}), 2)
            canvas.drawLine(th.yellow, screenPt0, screenPt0.add({-sgn * FORCE_LENGTH / 2, -5}), 2)

            text := sprintf("%g N", force.x)
            textSize := ft.measure(text)
            textPos := screenPt.add({(sgn < 0.0 ? 10.0 : -10.0 - textSize.x), -textSize.y / 2})
            
            ft.draw(text, textPos, th.yellow, 1)
        }
        
        if force.y != 0 {
            sgn := sign(force.y * ed.cam.s.y)

            screenPt := screenPt0.add({0, -sgn * FORCE_LENGTH})
            canvas.drawLine(th.yellow, screenPt0, screenPt, 2)
            canvas.drawLine(th.yellow, screenPt0, screenPt0.add({ 5, -sgn * FORCE_LENGTH / 2}), 2)
            canvas.drawLine(th.yellow, screenPt0, screenPt0.add({-5, -sgn * FORCE_LENGTH / 2}), 2)            

            text := sprintf("%g N", force.y)
            textSize := ft.measure(text)
            textPos := screenPt.add({-textSize.x / 2, (sgn < 0.0 ? 10.0 : -10.0 - textSize.y)})

            ft.draw(text, textPos, th.yellow, 1)
        }               
    }
}

fn (ed: ^Editor) drawConstraints() {
    for ptIndex, exists in ed.constraints {
        if !exists {continue}

        screenPt := ed.pts[ptIndex].transformed(ed.cam)
        canvas.drawQuad(th.magenta, {
            screenPt, 
            screenPt.add({-POINT_SIZE, POINT_SIZE * 2}), 
            screenPt.add({ POINT_SIZE, POINT_SIZE * 2}), 
            screenPt.add({ POINT_SIZE, POINT_SIZE * 2})
        })        
    }
}

fn (ed: ^Editor) drawScaleBar(windowSize: th.Vf2, ft: font.Font) {
    worldLen := 0.1
    if ed.cam.s.x > 2 * DEFAULT_SCALE {
        worldLen = 0.01
    } else if ed.cam.s.x < 0.2 * DEFAULT_SCALE {
        worldLen = 1.0
    }
    screenLen := worldLen * ed.cam.s.x

    startPt := th.Vf2{windowSize.x - screenLen - 50, windowSize.y - 50}
    endPt := startPt.add({screenLen, 0})

    canvas.drawLine(th.white, startPt, endPt, 1)

    text := sprintf("%d mm", round(worldLen * 1000))   // m -> mm
    textSize := ft.measure(text)
    textPos := startPt.add({screenLen / 2 - textSize.x / 2, -10 - textSize.y / 2})

    ft.draw(text, textPos, th.white, 1)
}

fn (ed: ^Editor) draw*(windowSize: th.Vf2, ft: font.Font) {
    ed.drawBackground(windowSize)   

    if ed.cmd == CMD_CALCULATE {
        if ed.errCode == ERR_NONE {
            ed.drawTriangles()
            ed.drawForces(ft)
            ed.drawConstraints()            
        }
    } else {
        ed.drawPolygons()
        ed.drawForces(ft)
        ed.drawConstraints()
        ed.drawPoints()
    }

    ed.drawScaleBar(windowSize, ft)
}

